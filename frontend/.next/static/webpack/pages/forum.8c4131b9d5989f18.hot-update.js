"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/forum",{

/***/ "./src/components/allPosts.tsx":
/*!*************************************!*\
  !*** ./src/components/allPosts.tsx ***!
  \*************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _wagmi_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @wagmi/core */ \"./node_modules/@wagmi/core/dist/esm/exports/index.js\");\n/* harmony import */ var _wagmi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../wagmi */ \"./src/wagmi.ts\");\n/* harmony import */ var _contracts_deployed_contract__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../contracts/deployed-contract */ \"./src/contracts/deployed-contract.ts\");\n\n\n\nconst allPosts = async ()=>{\n    try {\n        // Read the post increment counter\n        const postIdIncrement = await (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_2__.readContract)(_wagmi__WEBPACK_IMPORTED_MODULE_0__[\"default\"], {\n            abi: _contracts_deployed_contract__WEBPACK_IMPORTED_MODULE_1__.ABI,\n            address: _contracts_deployed_contract__WEBPACK_IMPORTED_MODULE_1__.deployedAddress,\n            functionName: \"postIdIncrement\",\n            args: []\n        });\n        // Ensure we got a valid response\n        if (postIdIncrement === undefined || postIdIncrement === null) {\n            throw new Error(\"Failed to read postIdIncrement\");\n        }\n        const posts = [];\n        // Only fetch posts if we have a valid increment counter\n        if (postIdIncrement > 0n) {\n            // Start from 1 since the first post was already initialized\n            for(let i = 1n; i < postIdIncrement; i++){\n                const postPromise = (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_2__.readContract)(_wagmi__WEBPACK_IMPORTED_MODULE_0__[\"default\"], {\n                    abi: _contracts_deployed_contract__WEBPACK_IMPORTED_MODULE_1__.ABI,\n                    address: _contracts_deployed_contract__WEBPACK_IMPORTED_MODULE_1__.deployedAddress,\n                    functionName: \"getPost\",\n                    args: [\n                        i\n                    ]\n                }).catch((error)=>{\n                    console.error(\"Failed to fetch post \".concat(i, \":\"), error);\n                    return undefined;\n                });\n                posts.push(postPromise);\n            }\n        }\n        // Wait for all posts to be fetched and filter out any undefined results\n        const values = await Promise.all(posts);\n        return values.filter((post)=>!!post);\n    } catch (error) {\n        // Improve error handling with more specific error messages\n        if (error instanceof Error) {\n            console.error(\"Error in allPosts:\", error.message);\n            throw error;\n        } else {\n            console.error(\"Unknown error in allPosts:\", error);\n            throw new Error(\"Failed to fetch posts from the contract\");\n        }\n    }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (allPosts);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9hbGxQb3N0cy50c3giLCJtYXBwaW5ncyI6Ijs7OztBQUEyQztBQUNiO0FBQ3dDO0FBR3RFLE1BQU1JLFdBQVc7SUFDYixJQUFJO1FBQ0Esa0NBQWtDO1FBQ2xDLE1BQU1DLGtCQUFtQixNQUFNTCx5REFBWUEsQ0FBQ0MsOENBQU1BLEVBQUU7WUFDaERLLEtBQUtKLDZEQUFHQTtZQUNSSyxTQUFTSix5RUFBZUE7WUFDeEJLLGNBQWM7WUFDZEMsTUFBTSxFQUFFO1FBQ1o7UUFFQSxpQ0FBaUM7UUFDakMsSUFBSUosb0JBQW9CSyxhQUFhTCxvQkFBb0IsTUFBTTtZQUMzRCxNQUFNLElBQUlNLE1BQU07UUFDcEI7UUFFQSxNQUFNQyxRQUE0QyxFQUFFO1FBRXBELHdEQUF3RDtRQUN4RCxJQUFJUCxrQkFBa0IsRUFBRSxFQUFFO1lBQ3RCLDREQUE0RDtZQUM1RCxJQUFLLElBQUlRLElBQUksRUFBRSxFQUFFQSxJQUFJUixpQkFBaUJRLElBQUs7Z0JBQ3ZDLE1BQU1DLGNBQWNkLHlEQUFZQSxDQUFDQyw4Q0FBTUEsRUFBRTtvQkFDckNLLEtBQUtKLDZEQUFHQTtvQkFDUkssU0FBU0oseUVBQWVBO29CQUN4QkssY0FBYztvQkFDZEMsTUFBTTt3QkFBQ0k7cUJBQUU7Z0JBQ2IsR0FBR0UsS0FBSyxDQUFDQyxDQUFBQTtvQkFDTEMsUUFBUUQsS0FBSyxDQUFDLHdCQUEwQixPQUFGSCxHQUFFLE1BQUlHO29CQUM1QyxPQUFPTjtnQkFDWDtnQkFFQUUsTUFBTU0sSUFBSSxDQUFDSjtZQUNmO1FBQ0o7UUFFQSx3RUFBd0U7UUFDeEUsTUFBTUssU0FBUyxNQUFNQyxRQUFRQyxHQUFHLENBQUNUO1FBQ2pDLE9BQU9PLE9BQU9HLE1BQU0sQ0FBQyxDQUFDQyxPQUE4QixDQUFDLENBQUNBO0lBRTFELEVBQUUsT0FBT1AsT0FBTztRQUNaLDJEQUEyRDtRQUMzRCxJQUFJQSxpQkFBaUJMLE9BQU87WUFDeEJNLFFBQVFELEtBQUssQ0FBQyxzQkFBc0JBLE1BQU1RLE9BQU87WUFDakQsTUFBTVI7UUFDVixPQUFPO1lBQ0hDLFFBQVFELEtBQUssQ0FBQyw4QkFBOEJBO1lBQzVDLE1BQU0sSUFBSUwsTUFBTTtRQUNwQjtJQUNKO0FBQ0o7QUFFQSwrREFBZVAsUUFBUUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvY29tcG9uZW50cy9hbGxQb3N0cy50c3g/Yjk1MiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZWFkQ29udHJhY3QgfSBmcm9tIFwiQHdhZ21pL2NvcmVcIjtcbmltcG9ydCBjb25maWcgZnJvbSBcIi4uL3dhZ21pXCI7XG5pbXBvcnQgeyBBQkksIGRlcGxveWVkQWRkcmVzcyB9IGZyb20gXCIuLi9jb250cmFjdHMvZGVwbG95ZWQtY29udHJhY3RcIjtcbmltcG9ydCB0eXBlIHsgUG9zdERldGFpbHMgfSBmcm9tIFwiLi4vdHlwZXMvcG9zdHMvdHlwZXNcIjtcblxuY29uc3QgYWxsUG9zdHMgPSBhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gUmVhZCB0aGUgcG9zdCBpbmNyZW1lbnQgY291bnRlclxuICAgICAgICBjb25zdCBwb3N0SWRJbmNyZW1lbnQgPSAoYXdhaXQgcmVhZENvbnRyYWN0KGNvbmZpZywge1xuICAgICAgICAgICAgYWJpOiBBQkksXG4gICAgICAgICAgICBhZGRyZXNzOiBkZXBsb3llZEFkZHJlc3MsXG4gICAgICAgICAgICBmdW5jdGlvbk5hbWU6IFwicG9zdElkSW5jcmVtZW50XCIsXG4gICAgICAgICAgICBhcmdzOiBbXSxcbiAgICAgICAgfSkpIGFzIGJpZ2ludDtcblxuICAgICAgICAvLyBFbnN1cmUgd2UgZ290IGEgdmFsaWQgcmVzcG9uc2VcbiAgICAgICAgaWYgKHBvc3RJZEluY3JlbWVudCA9PT0gdW5kZWZpbmVkIHx8IHBvc3RJZEluY3JlbWVudCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIHJlYWQgcG9zdElkSW5jcmVtZW50XCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcG9zdHM6IFByb21pc2U8UG9zdERldGFpbHMgfCB1bmRlZmluZWQ+W10gPSBbXTtcbiAgICAgICAgXG4gICAgICAgIC8vIE9ubHkgZmV0Y2ggcG9zdHMgaWYgd2UgaGF2ZSBhIHZhbGlkIGluY3JlbWVudCBjb3VudGVyXG4gICAgICAgIGlmIChwb3N0SWRJbmNyZW1lbnQgPiAwbikge1xuICAgICAgICAgICAgLy8gU3RhcnQgZnJvbSAxIHNpbmNlIHRoZSBmaXJzdCBwb3N0IHdhcyBhbHJlYWR5IGluaXRpYWxpemVkXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMW47IGkgPCBwb3N0SWRJbmNyZW1lbnQ7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBvc3RQcm9taXNlID0gcmVhZENvbnRyYWN0KGNvbmZpZywge1xuICAgICAgICAgICAgICAgICAgICBhYmk6IEFCSSxcbiAgICAgICAgICAgICAgICAgICAgYWRkcmVzczogZGVwbG95ZWRBZGRyZXNzLFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbk5hbWU6IFwiZ2V0UG9zdFwiLFxuICAgICAgICAgICAgICAgICAgICBhcmdzOiBbaV0sXG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gZmV0Y2ggcG9zdCAke2l9OmAsIGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9KSBhcyBQcm9taXNlPFBvc3REZXRhaWxzIHwgdW5kZWZpbmVkPjtcblxuICAgICAgICAgICAgICAgIHBvc3RzLnB1c2gocG9zdFByb21pc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gV2FpdCBmb3IgYWxsIHBvc3RzIHRvIGJlIGZldGNoZWQgYW5kIGZpbHRlciBvdXQgYW55IHVuZGVmaW5lZCByZXN1bHRzXG4gICAgICAgIGNvbnN0IHZhbHVlcyA9IGF3YWl0IFByb21pc2UuYWxsKHBvc3RzKTtcbiAgICAgICAgcmV0dXJuIHZhbHVlcy5maWx0ZXIoKHBvc3QpOiBwb3N0IGlzIFBvc3REZXRhaWxzID0+ICEhcG9zdCk7XG5cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAvLyBJbXByb3ZlIGVycm9yIGhhbmRsaW5nIHdpdGggbW9yZSBzcGVjaWZpYyBlcnJvciBtZXNzYWdlc1xuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGluIGFsbFBvc3RzOlwiLCBlcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIlVua25vd24gZXJyb3IgaW4gYWxsUG9zdHM6XCIsIGVycm9yKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBmZXRjaCBwb3N0cyBmcm9tIHRoZSBjb250cmFjdFwiKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGFsbFBvc3RzOyJdLCJuYW1lcyI6WyJyZWFkQ29udHJhY3QiLCJjb25maWciLCJBQkkiLCJkZXBsb3llZEFkZHJlc3MiLCJhbGxQb3N0cyIsInBvc3RJZEluY3JlbWVudCIsImFiaSIsImFkZHJlc3MiLCJmdW5jdGlvbk5hbWUiLCJhcmdzIiwidW5kZWZpbmVkIiwiRXJyb3IiLCJwb3N0cyIsImkiLCJwb3N0UHJvbWlzZSIsImNhdGNoIiwiZXJyb3IiLCJjb25zb2xlIiwicHVzaCIsInZhbHVlcyIsIlByb21pc2UiLCJhbGwiLCJmaWx0ZXIiLCJwb3N0IiwibWVzc2FnZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/components/allPosts.tsx\n"));

/***/ })

});